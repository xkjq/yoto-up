{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Yoto-UP Documentation","text":"<p>Note: Documentation is under construction. Please check back soon for updates.</p> <p></p> <p>Welcome. </p> <ul> <li>Overview</li> <li>Features</li> <li>Usage</li> <li>Security</li> </ul>"},{"location":"external%20services/","title":"External services","text":""},{"location":"external%20services/#external-services-used-by-yoto-up","title":"External services used by Yoto-UP","text":"<p>This document lists third-party hosts and services the project uses or may contact at runtime, why they are used, and the relevant endpoints.</p>"},{"location":"external%20services/#quick-inventory","title":"Quick inventory","text":"<ul> <li>Yoto API (primary service): https://api.yotoplay.com</li> <li>Yoto OAuth / Device authorization: https://login.yotoplay.com (device code and token endpoints)</li> <li>YotoIcons (icon discovery / scraping): https://www.yotoicons.com</li> <li>iTunes Search API (cover art lookup): https://itunes.apple.com/search</li> <li>NLTK data downloads (punkt, stopwords) \u2014 external NLTK servers</li> <li>Asciinema embeds used in the docs: https://asciinema.org</li> <li>GitHub (repo and releases): https://github.com/xkjq/yoto-up</li> </ul>"},{"location":"external%20services/#purpose-and-main-endpoints","title":"Purpose and main endpoints","text":"<ul> <li> <p>Yoto API (api.yotoplay.com)</p> <ul> <li>Purpose: content management (get/create/update/delete cards), media upload/transcode, icon and cover image upload, and other Yoto platform features used by the tool.</li> <li>Common endpoints used in code: <ul> <li>Device / OAuth: <code>https://login.yotoplay.com/oauth/device/code</code> and <code>https://login.yotoplay.com/oauth/token</code></li> <li>Content and media: <code>https://api.yotoplay.com/content</code>, <code>https://api.yotoplay.com/media/transcode/audio/uploadUrl</code>, <code>https://api.yotoplay.com/media/upload/&lt;id&gt;/transcoded</code> and other <code>api.yotoplay.com</code> paths.</li> </ul> </li> </ul> </li> <li> <p>YotoIcons (yotoicons.com)</p> <ul> <li>Purpose: optional icon discovery / scraping when searching for suitable pixel art 16x16 icons.</li> </ul> </li> <li> <p>iTunes Search</p> <ul> <li>Purpose: optional cover art search used by the <code>Add Cover Image</code> dialog to find album artwork by query.</li> <li>Endpoint used: <code>https://itunes.apple.com/search</code> (no API key required for simple searches).</li> </ul> </li> </ul>"},{"location":"external%20services/#scopes-and-device-flow","title":"Scopes and device flow","text":"<ul> <li>Device authorization flow<ul> <li>The project uses OAuth device flow. The app requests a device code, prints a verification URL and code, and polls for the token.</li> <li>Scopes requested by default include <code>profile</code> and <code>offline_access</code> (offline_access supplies a refresh token so the app can refresh tokens automatically).</li> </ul> </li> </ul>"},{"location":"external%20services/#privacy-and-data-handling-notes","title":"Privacy and data handling notes","text":"<ul> <li><code>tokens.json</code> contains OAuth access and refresh tokens \u2014 treat it as a secret. Do not commit it or publish it.</li> <li>Uploaded or cached media and icons may be stored locally under <code>.yoto_icon_cache</code>, <code>.yotoicons_cache</code>, and cache files such as <code>.yoto_api_cache.json</code>. These caches may contain URLs and metadata.</li> </ul>"},{"location":"external%20services/#references-and-links","title":"References and links","text":"<ul> <li>Yoto API base: https://api.yotoplay.com</li> <li>Yoto OAuth / Device: https://login.yotoplay.com</li> <li>Yoto Developer dashboard: https://dashboard.yoto.dev/</li> <li>YotoIcons: https://www.yotoicons.com/</li> <li>iTunes Search API: https://itunes.apple.com/</li> </ul>"},{"location":"overview/","title":"Overview","text":"<p>Yoto-UP is a set of command-line, terminal UI (Textual) and graphical (Flet) tools to manage Yoto content and devices. It provides helpers for:</p> <ul> <li>Uploading audio files and creating or appending to Yoto cards</li> <li>Managing playlists and cards</li> <li>Uploading and caching 16x16 icons</li> <li>A small terminal pixel-art editor used for icons</li> </ul> <p>The repository is organised roughly as follows:</p> <ul> <li><code>yoto_api.py</code> \u2014 API client for Yoto services</li> <li><code>yoto.py</code> \u2014 CLI entry-points and scripts</li> <li><code>gui.py</code> \u2014 Graphical UI using Flet</li> <li><code>yoto_app/</code> \u2014 UI helpers, playlists UI, upload tasks, and dialogs</li> <li><code>models.py</code> \u2014 Pydantic data models used with the API</li> </ul>"},{"location":"security/","title":"Security","text":"<p>Important notes before publishing or sharing this repository:</p> <ul> <li>Do NOT commit <code>tokens.json</code> or any files containing access/refresh tokens. <code>tokens.json</code> is listed in <code>.gitignore</code> by default, but you should still remove local token files before publishing.</li> <li>The application client ID is currently stored in <code>yoto_app/config.py</code>. If you are forking or adapting the code, please generate your own at the Yoto Developer dashboard. </li> </ul>"},{"location":"features/","title":"Features","text":"<p>This section gives a quick tour of the major features in Yoto-UP. </p> <ul> <li> <p>[Playlist Management]</p> <ul> <li>Search, view and filter playlists</li> <li>Create and edit playlist</li> </ul> </li> <li> <p>Icon management</p> <ul> <li>Search, cache and upload 16\u00d716 pixel icons</li> <li>Render pixel art for inspection</li> <li>Helpers in <code>yoto_api.py</code></li> <li>Available both in terminal and the full GUI</li> </ul> </li> <li> <p>Cover management</p> <ul> <li>Easy cover management</li> <li>Search and upload cover images for cards</li> </ul> </li> <li> <p>Uploading audio files</p> <ul> <li>Create new cards or append tracks/chapters to existing cards</li> <li>Concurrency and progress reporting</li> <li>CLI and Flet UI workflows</li> </ul> </li> <li> <p>Import and export playlist</p> <ul> <li>Easily import and export playlists/cards for sharing</li> </ul> </li> </ul>"},{"location":"features/cover_management/","title":"Cover Management","text":"<p>This section covers uploading and managing cover images for cards.</p> <p>What you can do</p> <ul> <li>Upload a cover image from a local file or via a remote URL.</li> <li>The tool uploads directly using Yoto's API.</li> </ul> <p>Key code locations</p> <ul> <li><code>yoto_api.py</code></li> <li><code>upload_cover_image(image_path, imageUrl, autoconvert, ...)</code> \u2014 upload and return cover metadata</li> <li> <p><code>get_icon_cache_path</code> \u2014 used to cache/download images for preview</p> </li> <li> <p><code>yoto_app/add_cover_dialog.py</code> \u2014 UI dialog that lets you select and upload a cover for a card</p> </li> </ul> <p>Usage notes</p> <ul> <li>The API expects either a file body or an <code>imageUrl</code>. If you provide a local file, it will be streamed in the request body.</li> <li>The function returns cover metadata including <code>mediaId</code> and <code>mediaUrl</code>. Store or pass that into a card's metadata as appropriate.</li> </ul>"},{"location":"features/icon_management/","title":"Icon Management","text":"<p>Yoto-UP includes tools to find, render, cache and upload small 16\u00d716 icons used as card/chapter artwork.</p> See a sample of it working in the terminal <p>This example shows editing a newly created playlist and letting the icon be automatically selected. </p> <ul> <li>Search Official Yoto icons and YotoIcons (scrapes / caches results).</li> <li>Download and cache official Yoto icons to <code>.yoto_icon_cache/</code>.</li> <li>Upload a YotoIcons icon to the official Yoto API (creating a <code>displayIcon</code>).</li> <li>Render pixel-art previews in the terminal (useful for picking icons).</li> </ul> <p>Key code locations</p> <ul> <li><code>yoto_api.py</code></li> <li><code>get_public_icons</code> \u2014 download and cache official icons</li> <li><code>search_yotoicons</code> / <code>search_yotoicons</code> \u2014 scrape and cache YotoIcons results</li> <li><code>upload_yotoicons_icon_to_yoto_api</code> / <code>upload_custom_icon</code> \u2014 upload icons to Yoto</li> <li> <p><code>get_icon_cache_path</code> \u2014 utility to resolve a cached path from an icon field</p> </li> <li> <p><code>icons.py</code> \u2014 small renderer used to display pixel art in the terminal</p> </li> <li><code>yoto_app/</code> \u2014 UI dialogs and helpers exposing icon search/upload from the Flet UI</li> </ul> <p>Usage tips</p> <ul> <li>When uploading icons, a <code>displayIcon</code> (mediaId + url) is returned; prefer referencing the returned mediaId when assigning to <code>TrackDisplay</code> / <code>ChapterDisplay</code> fields.</li> </ul>"},{"location":"features/uploading/","title":"Uploading Audio Files","text":"<p>Yoto-UP supports creating new cards from a local folder of audio files, or appending audio as tracks/chapters to existing cards.</p> <p>Modes</p> <ul> <li>Create new card</li> <li>Upload a folder of audio files and create a single new Yoto card.</li> <li> <p>Optionally create a single combined \"chapter\" containing all files (single-chapter mode) or one chapter per file.</p> </li> <li> <p>Append to existing card</p> </li> <li>Upload files and append them as new chapters or add tracks to an existing chapter.</li> <li>Use the Playlists tab to fetch and select a target card. If playlists are empty, use the Fetch button.</li> </ul> <p>Where to configure</p> <ul> <li>Concurrency: the Flet UI exposes a <code>Concurrency</code> field to control how many uploads run concurrently.</li> <li>Upload mode: choose <code>Create new card</code> or <code>Add to existing card</code> in the Upload tab.</li> <li>Tokens: the app uses <code>tokens.json</code> for OAuth tokens. Remove or rotate tokens before publishing the repo.</li> </ul> <p>Key code locations</p> <ul> <li><code>yoto_app/upload_tasks.py</code> \u2014 upload orchestration moved from <code>gui.py</code>; this contains the worker loop, progress updates, and append logic.</li> <li><code>yoto_api.py</code> \u2014 helpers to upload audio, poll for transcoding, and build Chapter/Track objects:</li> <li><code>upload_and_transcode_audio_async</code></li> <li><code>get_chapter_from_transcoded_audio</code></li> <li><code>upload_and_transcode_and_create_card_async</code></li> </ul> <p>Troubleshooting</p> <ul> <li>If append fails with Pydantic validation errors for <code>Chapter</code> (missing <code>title</code> or <code>tracks</code>), ensure the transcoding step returned valid metadata. The app will skip invalid/null results during append.</li> <li>If playlists are empty when you try to append, use the <code>Fetch Playlists</code> button or the <code>Fetch</code> action in the Playlists tab to populate the dropdown.</li> </ul> <p>Example workflow (Flet UI)</p> <ol> <li>Authenticate via the Auth tab.</li> <li>Open Playlists and click <code>Fetch Playlists</code> if needed.</li> <li>Open Upload, set a folder path, pick <code>Create new card</code> or <code>Add to existing card</code>.</li> <li>Click <code>Start Upload</code> and monitor the progress bars.</li> </ol>"},{"location":"usage/installation/","title":"Installation","text":"<p>Follow these steps to install Yoto Up:</p>"},{"location":"usage/installation/#binary-installation","title":"Binary installation","text":"<p>Pre built binaries (Linux/Windows/MacOs) are provided for the flet based gui, these can be found under the \"releases\" section on github.</p>"},{"location":"usage/installation/#installing-from-git","title":"Installing from git","text":"<ol> <li> <p>Clone the repository:</p> <pre><code>git clone https://github.com/your-org/yoto-up.git\ncd yoto-up\n</code></pre> </li> <li> <p>Create (and activate) virtual environment <pre><code>uv venv\nsource .venv/bin/activate\n</code></pre></p> </li> <li> <p>Install dependencies: <pre><code>uv pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>(Optional) Install GUI dependencies:     If you plan to use the GUI, install additional dependencies:     <pre><code>uv pip install -r yoto_app/requirements.txt\n</code></pre></p> </li> <li> <p>Start the application:     To start Yoto Up, you can use either CLI mode or GUI mode:</p> <ul> <li> <p>CLI mode: <pre><code>python yoto.py --help\n</code></pre></p> </li> <li> <p>GUI mode: <pre><code>python gui.py\n</code></pre></p> </li> </ul> </li> </ol>"},{"location":"usage/installation/#next-steps","title":"Next Steps","text":"<ul> <li>See Configuration for setup details.</li> <li>Visit Troubleshooting if you encounter issues.</li> </ul>"},{"location":"usage/usage/","title":"Usage","text":""},{"location":"usage/usage/#cli-tui","title":"CLI / TUI","text":"<p>Run the terminal UI and CLI tools from the project root after installing dependencies:</p> <pre><code>python yoto.py --help\n</code></pre> <p>Follow on-screen prompts. The TUI uses the Textual library for interactive terminal screens.</p>"},{"location":"usage/usage/#graphical-ui-flet","title":"Graphical UI (Flet)","text":"<p>Start the graphical interface (desktop/browser) with:</p> <pre><code>python gui.py\n</code></pre> <ul> <li>Use the Auth tab to authenticate with Yoto (device flow). The app stores short-lived tokens locally in <code>tokens.json</code> (see Security notes).</li> <li>Use the Playlists tab to fetch and manage your cards.</li> <li>Use the Upload tab to select a folder and create a new card or append to an existing card.</li> </ul>"},{"location":"usage/usage/#examples","title":"Examples","text":"<ul> <li>Create a new card by selecting a folder with audio files, choose <code>Create new card</code>, set a title, and click <code>Start Upload</code>.</li> <li>Append to an existing card: choose <code>Add to existing card</code>, fetch playlists if needed, select the target, then <code>Start Upload</code>.</li> </ul>"}]}